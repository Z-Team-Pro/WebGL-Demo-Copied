// Generated by CoffeeScript 1.3.3
(function() {
  var Vec3, Vec4;

  window.Vec3 = Vec3 = (function() {

    Vec3.property('x', {
      get: function() {
        return this.data[0];
      },
      set: function(val) {
        return this.data[0] = val;
      }
    });

    Vec3.property('y', {
      get: function() {
        return this.data[1];
      },
      set: function(val) {
        return this.data[1] = val;
      }
    });

    Vec3.property('z', {
      get: function() {
        return this.data[2];
      },
      set: function(val) {
        return this.data[2] = val;
      }
    });

    Vec3.property('length', {
      get: function() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
      }
    });

    function Vec3(data) {
      var _ref;
      this.data = data;
      if ((_ref = this.data) == null) {
        this.data = new Float32Array(3);
      }
    }

    Vec3.prototype.sub = function(other, dst) {
      if (dst == null) {
        dst = this;
      }
      dst.x = this.x - other.x;
      dst.y = this.y - other.y;
      dst.z = this.z - other.z;
      return dst;
    };

    Vec3.prototype.add = function(other, dst) {
      if (dst == null) {
        dst = this;
      }
      dst.x = this.x + other.x;
      dst.y = this.y + other.y;
      dst.z = this.z + other.z;
      return dst;
    };

    Vec3.prototype.addVal3 = function(x, y, z, dst) {
      if (dst == null) {
        dst = this;
      }
      dst.x = this.x + x;
      dst.y = this.y + y;
      dst.z = this.z + z;
      return dst;
    };

    Vec3.prototype.mul = function(scalar, dst) {
      if (dst == null) {
        dst = this;
      }
      dst.x = this.x * scalar;
      dst.y = this.y * scalar;
      dst.z = this.z * scalar;
      return dst;
    };

    Vec3.prototype.div = function(scalar, dst) {
      if (dst == null) {
        dst = this;
      }
      dst.x = this.x / scalar;
      dst.y = this.y / scalar;
      dst.z = this.z / scalar;
      return dst;
    };

    Vec3.prototype.divVal3 = function(x, y, z, dst) {
      if (dst == null) {
        dst = this;
      }
      dst.x = this.x / x;
      dst.y = this.y / y;
      dst.z = this.z / z;
      return dst;
    };

    Vec3.prototype.dot = function(other) {
      return this.x * other.x + this.y * other.y + this.z * other.z;
    };

    Vec3.prototype.normalize = function(dst) {
      var l;
      if (dst == null) {
        dst = this;
      }
      l = this.length;
      if (l > 0) {
        this.mul(1 / this.length, dst);
      }
      return dst;
    };

    Vec3.prototype.set = function(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
      return this;
    };

    return Vec3;

  })();

  window.Vec4 = Vec4 = (function() {

    Vec4.property('x', {
      get: function() {
        return this.data[0];
      },
      set: function(val) {
        return this.data[0] = val;
      }
    });

    Vec4.property('y', {
      get: function() {
        return this.data[1];
      },
      set: function(val) {
        return this.data[1] = val;
      }
    });

    Vec4.property('z', {
      get: function() {
        return this.data[2];
      },
      set: function(val) {
        return this.data[2] = val;
      }
    });

    Vec4.property('w', {
      get: function() {
        return this.data[3];
      },
      set: function(val) {
        return this.data[3] = val;
      }
    });

    function Vec4(data) {
      var _ref;
      this.data = data;
      if ((_ref = this.data) == null) {
        this.data = new Float32Array(4);
      }
    }

    Vec4.prototype.sub = function(other, dst) {
      if (dst == null) {
        dst = this;
      }
      dst.x = this.x - other.x;
      dst.y = this.y - other.y;
      dst.z = this.z - other.z;
      dst.w = this.w - other.w;
      return dst;
    };

    Vec4.prototype.dot = function(other) {
      return this.x * other.x + this.y * other.y + this.z * other.z + this.w * other.w;
    };

    Vec4.prototype.toVec3 = function(dst) {
      if (dst == null) {
        dst = new Vec3();
      }
      dst.x = this.x;
      dst.y = this.y;
      dst.z = this.z;
      return dst;
    };

    return Vec4;

  })();

}).call(this);
