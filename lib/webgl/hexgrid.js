// Generated by CoffeeScript 1.3.3
var Hexgrid, clamp,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

clamp = function(value, left, right) {
  if (value < left) {
    return left;
  } else if (value > right) {
    return right;
  } else {
    return value;
  }
};

return Hexgrid = (function(_super) {

  __extends(Hexgrid, _super);

  Hexgrid.prototype.attribs = ['position', 'texcoord', 'barycentric'];

  function Hexgrid(gl, xsize, ysize, width, height) {
    var b, m, t, vertices, x, x1, x2, x3, x4, y, _i, _j;
    this.gl = gl;
    if (xsize == null) {
      xsize = 16;
    }
    if (ysize == null) {
      ysize = 16;
    }
    if (width == null) {
      width = 1;
    }
    if (height == null) {
      height = 1;
    }
    Hexgrid.__super__.constructor.call(this);
    vertices = [];
    for (x = _i = 0; 0 <= xsize ? _i <= xsize : _i >= xsize; x = 0 <= xsize ? ++_i : --_i) {
      x1 = clamp((x - 0.5) / xsize, 0, 1);
      x2 = clamp((x + 0.0) / xsize, 0, 1);
      x3 = clamp((x + 0.5) / xsize, 0, 1);
      x4 = clamp((x + 1.0) / xsize, 0, 1);
      for (y = _j = 0; _j < ysize; y = _j += 2) {
        t = (y + 0) / ysize;
        m = (y + 1) / ysize;
        b = (y + 2) / ysize;
        vertices.push(x2 * width, 0, m * height, x2, m, 0, 0, 1, x3 * width, 0, t * height, x3, t, 0, 1, 0, x1 * width, 0, t * height, x1, t, 1, 0, 0, x4 * width, 0, m * height, x4, m, 0, 0, 1, x3 * width, 0, t * height, x3, t, 0, 1, 0, x2 * width, 0, m * height, x2, m, 1, 0, 0, x3 * width, 0, b * height, x3, b, 0, 0, 1, x2 * width, 0, m * height, x2, m, 0, 1, 0, x1 * width, 0, b * height, x1, b, 1, 0, 0, x3 * width, 0, b * height, x3, b, 0, 0, 1, x4 * width, 0, m * height, x4, m, 0, 1, 0, x2 * width, 0, m * height, x2, m, 1, 0, 0);
      }
    }
    this.size = vertices.length / 8;
    this.uploadList(vertices);
  }

  Hexgrid.prototype.setPointersForShader = function(shader) {
    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);
    this.setPointer(shader, 'position', 3, 0, 8);
    this.setPointer(shader, 'texcoord', 2, 3, 8);
    this.setPointer(shader, 'barycentric', 3, 5, 8);
    return this;
  };

  return Hexgrid;

})(require('drawable'));
