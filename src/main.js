// Generated by CoffeeScript 1.3.3
var Quad, Shader, audio, disableSelect, enableSelect, errorContainer, load_hooks, loading;

audio = require('audio');

loading = require('loading');

Shader = require('webgl/shader');

Quad = require('webgl/quad');

require('webgl-nuke-vendor-prefix');

require('webgl-texture-float-extension-shims');

load_hooks = {
  '\.jpg$|\.jpeg$|\.gif$|\.png': function(name, buffer, callback) {
    var ext, image, mime;
    ext = name.split('.').pop();
    switch (ext) {
      case 'png':
        mime = 'image/png';
        break;
      case 'gif':
        mime = 'image/gif';
        break;
      case 'jpg':
      case 'jpeg':
        mime = 'image/jpeg';
    }
    image = new Image();
    image.src = getURL(buffer, mime);
    return image.onload = function() {
      return callback(image);
    };
  },
  '\.mpg$|\.ogg$|\.wav$': function(name, buffer, callback) {
    return audio.decode(buffer, function(result) {
      return callback(result);
    });
  }
};

errorContainer = function(title) {
  canvas.remove();
  $('#ui').empty();
  return $('<div></div>').css({
    position: 'absolute',
    width: 300,
    left: '50%',
    top: 50,
    marginLeft: -100
  }).append($('<h1></h1>').text(title)).appendTo('#ui');
};

disableSelect = function() {
  $('*').each(function() {
    $(this).attr('unselectable', 'on').css({
      '-moz-user-select': 'none',
      '-webkit-user-select': 'none',
      'user-select': 'none',
      '-ms-user-select': 'none'
    });
    return this.onselectstart = function() {
      return false;
    };
  });
  return document.oncontextmenu = function() {
    return false;
  };
};

enableSelect = function() {
  $('*').each(function() {
    $(this).removeAttr('unselectable').css({
      '-moz-user-select': 'text',
      '-webkit-user-select': 'text',
      'user-select': 'text',
      '-ms-user-select': 'text'
    });
    return this.onselectstart = void 0;
  });
  return document.oncontextmenu = void 0;
};

exports.main = function() {
  var Application, application, container, floatExt, stddev;
  disableSelect();
  window.canvas = $('canvas');
  window.onerror = function(error) {
    if (error.search(Shader.error) > 0) {
      return true;
    }
  };
  try {
    window.gl = canvas[0].getContext('experimental-webgl');
    if (!window.gl) {
      window.gl = canvas[0].getContext('webgl');
    }
  } catch (_error) {}
  if (window.gl) {
    window.quad = new Quad(window.gl);
    stddev = gl.getExtension('OES_standard_derivatives');
    if (!stddev) {
      return errorContainer('Missing Extension: Standard Derivatives').append('<p>This application requires the WebGL <a href="http://www.khronos.org/registry/webgl/extensions/OES_standard_derivatives/">Standard Derivatives extension</a> which you do not have, sorry.</p>');
    }
    floatExt = gl.getFloatExtension({
      require: ['renderable'],
      prefer: ['filterable', 'half'],
      throws: false
    });
    if (!floatExt) {
      return errorContainer('Missing Extension: Floating Point Textures').append('<p>This application requires the WebGL <a href="http://www.khronos.org/registry/webgl/extensions/OES_texture_float/">Floating Point Textures extension</a> which you do not have, sorry.</p>');
    }
    Application = require('application').Application;
    application = null;
    loading.show('Loading ...');
    return loader.hooks(load_hooks).mount({
      url: 'assets.pack',
      loaded: function(files, fs) {
        var container, name, value;
        for (name in files) {
          value = files[name];
          if (name.match('\.shaderlib$')) {
            fs[name] = Shader.splitLines(name, value);
          }
        }
        try {
          for (name in files) {
            value = files[name];
            if (name.match('\.shader$')) {
              fs[name] = new Shader(gl, name, value);
            }
          }
          return application = new Application(window.canvas, window.gl);
        } catch (error) {
          if (error === 'ShaderError') {
            enableSelect();
            container = errorContainer('Shader Error').append('<p>\n    An error occured when compiling a shader, you can <a href="mailto:pyalot@gmail.com">paste me the error</a>.\n</p>');
            container.css({
              width: 600,
              marginLeft: -300
            });
            return $('<pre></pre>').text(Shader.lastError).css('overflow', 'auto').appendTo(container);
          } else {
            throw error;
          }
        }
      },
      progress: loading.progress
    });
  } else {
    container = errorContainer('You dont have WebGL');
    if ($.browser.msie) {
      container.append('<p>\n    You have Internet Explorer, please install\n    <a href="https://www.google.com/intl/en/chrome/browser/">Google Chrome</a> or\n    <a href="http://www.mozilla.org/en-US/firefox/new/">Firefox</a>\n</p>');
    } else if ($.browser.webkit) {
      container.append('<p>\n    If you use OSX Safari, please <a href="http://www.ikriz.nl/2011/08/23/enable-webgl-in-safari">enable WebGL manually</a>.\n    If you use iOS Safari, you cannot use WebGL.\n    If you use Android, please try <a href="http://www.mozilla.org/en-US/mobile/">Firefox Mobile</a> or\n    <a href="https://play.google.com/store/apps/details?id=com.opera.browser&hl=en">Opera Mobile</a>\n</p>');
    }
    return container.append('<p>\n    Please consult the <a href="http://support.google.com/chrome/bin/answer.py?hl=en&answer=1220892">support pages</a>\n    on how to get WebGL for your machine.\n</p>');
  }
};
