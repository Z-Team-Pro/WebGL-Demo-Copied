// Generated by CoffeeScript 1.3.3
var cross, dot, length, sadd, slength, smul, vadd, vsub;

vsub = function(p1, p2) {
  return [p1[0] - p2[0], p1[1] - p2[1], p1[2] - p2[2]];
};

vadd = function(p1, p2) {
  return [p1[0] + p2[0], p1[1] + p2[1], p1[2] + p2[2]];
};

sadd = function(s, p) {
  var x, y, z;
  x = p[0];
  y = p[1];
  z = p[2];
  return [x + s, y + s, z + s];
};

slength = function(p) {
  var x, y, z;
  x = p[0];
  y = p[1];
  z = p[2];
  return x * x + y * y + z * z;
};

length = function(p) {
  return Math.sqrt(slength(p));
};

dot = function(p1, p2) {
  var x1, x2, y1, y2, z1, z2;
  x1 = p1[0];
  y1 = p1[1];
  z1 = p1[2];
  x2 = p2[0];
  y2 = p2[1];
  z2 = p2[2];
  return x1 * x2 + y1 * y2 + z1 * z2;
};

smul = function(s, p) {
  var x, y, z;
  x = p[0];
  y = p[1];
  z = p[2];
  return [x * s, y * s, z * s];
};

cross = function(p1, p2) {
  var x1, x2, y1, y2, z1, z2;
  x1 = p1[0];
  y1 = p1[1];
  z1 = p1[2];
  x2 = p2[0];
  y2 = p2[1];
  z2 = p2[2];
  return [y1 * z2 - z1 * y2, z1 * x2 - x1 * z2, x1 * y2 - y1 * x2];
};

exports.closestPointTriangle = function(p, a, b, c) {
  var ab, ac, bc, n, sdenom, snom, tdenom, tnom, u, udenom, unom, v, va, vb, vc, w;
  ab = vsub(b, a);
  ac = vsub(c, a);
  bc = vsub(c, b);
  snom = dot(vsub(p, a), ab);
  sdenom = dot(vsub(p, b), vsub(a, b));
  tnom = dot(vsub(p, a), ac);
  tdenom = dot(vsub(p, c), vsub(a, c));
  if (snom <= 0 && tnom <= 0) {
    return a;
  }
  unom = dot(vsub(p, b), bc);
  udenom = dot(vsub(p, c), vsub(b, c));
  if (sdenom <= 0 && unom <= 0) {
    return b;
  }
  if (tdenom <= 0 && udenom <= 0) {
    return c;
  }
  n = cross(vsub(b, a), vsub(c, a));
  vc = dot(n, cross(vsub(a, p), vsub(b, p)));
  if (vc <= 0 && snom >= 0 && sdenom >= 0) {
    return vadd(a, smul(snom / (snom + sdenom), ab));
  }
  va = dot(n, cross(vsub(b, p), vsub(c, p)));
  if (va <= 0 && unom >= 0 && udenom >= 0) {
    return vadd(b, smul(unom / (unom + udenom), bc));
  }
  vb = dot(n, cross(vsub(c, p), vsub(a, p)));
  if (vb <= 0 && tnom > 0 && tdenom >= 0) {
    return vadd(a, smul(tnom / (tnom + tdenom), ac));
  }
  u = va / (va + vb + vc);
  v = vb / (va + vb + vc);
  w = 1 - u - v;
  return vadd(smul(u, a), vadd(smul(v, b), smul(w, c)));
};

exports.pointTriangleDist = function(p, v0, v1, v2) {
  var cx, cy, cz, dx, dy, dz, px, py, pz, _ref;
  _ref = exports.closestPointTriangle(p, v0, v1, v2), cx = _ref[0], cy = _ref[1], cz = _ref[2];
  px = p[0], py = p[1], pz = p[2];
  dx = cx - px;
  dy = cy - py;
  dz = cz - pz;
  return Math.sqrt(dx * dx + dy * dy + dz * dz);
};
